BASIC IDEA:
    There are two parts for this project:
    1. Website
    2. A desktop app

The website is powered by react with nextjs and the bacend in written in express with mongodb
The desktop application is written in python using custom tkinter.

Problem:
When ever you want to control your desktop remotely from some where or for the repair person to be able to help you fix your pc remotely they need to ascess your cmoputer remotely.
Or may be you want to keep track of the systems in your company and organise and control them from a single point.


Solution:
GhostSocket solves it! You first signups on the website and then download the desktop app from the ghost socket website on all the computers you want to access remotely and sig nin on the desktop app with the same mail you used for the website signu, The app auto starts on startp.
In the app you can set the access permisssions thatare allowed from the website.
Once done you get access to all of the devices in the website under mydevices section you can choose any device and hit the launch button which establishes connection with the device and then you can control the device.
Now you can coose a specific device and generate a session on it with a expiry or manual expiry you get a sessionkey you can share it with anyone that you want to allow access to control your device the main control is in yur hands you can kill the session at any time and you can restrict the access permisssions to what he gets.


Access permissions:
1 -> Device profile -> Viw the device info like os, usename,location ip and view the permissions provided to you from the app(if you are the owner else view the permissions provided to you by the session creator) and also view the session that are created on this device wth their statuses like active , terminated and modify the session permissions and even terminate any active sessions
2 -> Files -> Vie all the files like in explores download them and delete them 
3 -> Terminal -> Execute remote commands
4 -> Webcamfeed -> view the live webcan feed capture snapshots
5 -> Screen feed and control -> View the live screen feed capture snap shots and control the mouse and keyboard gestures
6 -> Resource Monitor -> View live memory and cpu ussage along with running processes

Network Protocols:
HTTP -> For CURD Operations that dosent require realtime communication
Socket -> For live data transfer and establishing the webrtc connection as a signalling server
WebRTC -> For live screen and webcam feed and realtime mouse and keyboard control


Security:
Everything stored on the website is jwt encrypted and everythoing stored on app is also encrypted
The complete live stream is end to end encrypted.
As the complete data of remote ascess is peer to peer it flows from desktop app to browser server stores nothing

Live website -> https://ghost-socket.vercel.app




Now i want you to generate a readme.md file
expand the getting started section(just add dummy data i will modify it latter)

clone
i have 3 folders
application frontend server
specific version of python required and have a req.txt
frontend is nextjs used shadcn and tailwind
backend is express with mongodb

put a note on disabling antivirus and firewall
and also put a node on use it with caution and only on devces you own


